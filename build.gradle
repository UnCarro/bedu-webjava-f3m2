plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    //id 'org.sonarqube' version '3.5.0.2730'
    id "org.sonarqube" version "4.2.1.3168"
    id 'jacoco'
}

group 'org.example'
version '1.0-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

// configurar jacoco para obtener el reporte en formato xml
jacocoTestReport {
    reports {
        xml.required = true // Que genere el resultado tambi√©n en XML
    }
}



test {
    useJUnitPlatform()

    systemProperty 'junit.jupiter.execution.parallel.enabled', 'false'

    // Set the system property for the testing environment (optional)
    systemProperty 'spring.profiles.active', 'test'
    finalizedBy jacocoTestReport

}

subprojects {
    apply plugin: 'org.sonarqube'

}

sonar {
    properties {
        property 'sonar.host.url', 'http://localhost:9000' // Replace with the URL of your SonarQube servg
        //property 'sonar.token', 'squ_6bb7ef378215fd20335d7715a97ff0bbf6be583f' // Replace with your SonarQube authentication token
        property 'sonar.token', 'sqp_e9ad2e6a13fb2055be6c260a69e38ca602e20273'
        property 'sonar.projectKey', 'postwork'
        property 'sonar.projectName', 'postwork'
        property 'sonar.jacoco.reportPaths', 'build/reports/jacoco/test'
    }
}

